#!/bin/bash

# Script de prueba para demostrar el manejo de fallos del servicio externo con cach√©
# Spring Java Token Labs API

echo "üöÄ Iniciando pruebas de manejo de fallos del servicio externo con cach√©"
echo "=================================================================="

BASE_URL="http://localhost:8080/api/v1"

# Funci√≥n para hacer requests y mostrar resultados
make_request() {
    local method=$1
    local endpoint=$2
    local data=$3
    local description=$4
    
    echo ""
    echo "üìã $description"
    echo "----------------------------------------"
    
    if [ "$method" = "POST" ] && [ -n "$data" ]; then
        response=$(curl -s -X POST "$BASE_URL$endpoint" \
            -H "Content-Type: application/json" \
            -d "$data")
    elif [ "$method" = "POST" ]; then
        response=$(curl -s -X POST "$BASE_URL$endpoint")
    else
        response=$(curl -s -X GET "$BASE_URL$endpoint")
    fi
    
    echo "Response: $response"
    
    # Verificar c√≥digo de estado
    status_code=$(curl -s -o /dev/null -w "%{http_code}" -X $method "$BASE_URL$endpoint" \
        ${data:+-H "Content-Type: application/json" -d "$data"})
    
    if [ "$status_code" = "200" ]; then
        echo "‚úÖ Status: OK ($status_code)"
    else
        echo "‚ùå Status: Error ($status_code)"
    fi
}

# Esperar a que la aplicaci√≥n est√© lista
echo "‚è≥ Esperando a que la aplicaci√≥n est√© lista..."
sleep 5

# Verificar que la aplicaci√≥n est√© funcionando
echo ""
echo "üîç Verificando estado de la aplicaci√≥n..."
health_response=$(curl -s "$BASE_URL/health")
if [[ $health_response == *"OK"* ]]; then
    echo "‚úÖ Aplicaci√≥n funcionando correctamente"
else
    echo "‚ùå Aplicaci√≥n no est√° funcionando. Verifica que est√© ejecut√°ndose."
    exit 1
fi

# Caso 1: Servicio funcionando normalmente
echo ""
echo "üß™ CASO 1: Servicio externo funcionando normalmente"
echo "=================================================="

make_request "GET" "/test/failure-status" "" "Verificando estado inicial de simulaci√≥n de fallo"
make_request "POST" "/calculate" '{"firstNumber": 10.0, "secondNumber": 20.0}' "Realizando c√°lculo con servicio funcionando"

# Caso 2: Activar simulaci√≥n de fallo
echo ""
echo "üß™ CASO 2: Activando simulaci√≥n de fallo del servicio externo"
echo "=========================================================="

make_request "POST" "/test/simulate-failure" "" "Activando simulaci√≥n de fallo"
make_request "GET" "/test/failure-status" "" "Verificando que la simulaci√≥n est√© activa"

# Caso 3: Servicio fallando con cach√© disponible
echo ""
echo "üß™ CASO 3: Servicio externo fallando con cach√© disponible"
echo "========================================================"

make_request "POST" "/calculate" '{"firstNumber": 5.0, "secondNumber": 15.0}' "Realizando c√°lculo con servicio fallando (deber√≠a usar cach√©)"

# Caso 4: Limpiar cach√© y probar fallo sin cach√©
echo ""
echo "üß™ CASO 4: Servicio externo fallando sin cach√©"
echo "============================================="

make_request "POST" "/test/cache-clear" "" "Limpiando cach√©"
make_request "POST" "/calculate" '{"firstNumber": 3.0, "secondNumber": 7.0}' "Realizando c√°lculo sin cach√© (deber√≠a fallar)"

# Caso 5: Desactivar simulaci√≥n y recuperar servicio
echo ""
echo "üß™ CASO 5: Desactivando simulaci√≥n y recuperando servicio"
echo "======================================================="

make_request "POST" "/test/disable-failure" "" "Desactivando simulaci√≥n de fallo"
make_request "GET" "/test/failure-status" "" "Verificando que la simulaci√≥n est√© desactivada"
make_request "POST" "/calculate" '{"firstNumber": 8.0, "secondNumber": 12.0}' "Realizando c√°lculo con servicio recuperado"

# Caso 6: Verificar que el cach√© funciona nuevamente
echo ""
echo "üß™ CASO 6: Verificando funcionamiento del cach√©"
echo "=============================================="

make_request "POST" "/calculate" '{"firstNumber": 2.0, "secondNumber": 8.0}' "Realizando c√°lculo adicional (deber√≠a usar cach√©)"

echo ""
echo "üéâ Pruebas completadas!"
echo "======================"
echo ""
echo "üìä Resumen de casos probados:"
echo "1. ‚úÖ Servicio funcionando normalmente"
echo "2. ‚úÖ Activaci√≥n de simulaci√≥n de fallo"
echo "3. ‚úÖ Fallback a cach√© cuando servicio falla"
echo "4. ‚úÖ Error cuando no hay cach√© y servicio falla"
echo "5. ‚úÖ Recuperaci√≥n del servicio"
echo "6. ‚úÖ Funcionamiento normal del cach√©"
echo ""
echo "üîß Endpoints de testing disponibles:"
echo "- GET  /test/failure-status     - Verificar estado de simulaci√≥n"
echo "- POST /test/simulate-failure   - Activar simulaci√≥n de fallo"
echo "- POST /test/disable-failure    - Desactivar simulaci√≥n de fallo"
echo "- POST /test/cache-clear        - Limpiar cach√©"
echo ""
echo "üìö Para m√°s informaci√≥n, consulta: MANEJO-FALLOS-CACHE.md"
